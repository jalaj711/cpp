#include<vector>
#include<queue>

using namespace std;

class Solution {
private:
public:
    int numIslands(vector<vector<char>> &grid) {
        int a = 0,
                m = grid.size(),
                n = grid[0].size(),
                s = 0;
        queue<pair<int, int>> bfs;
        pair<int, int> front;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == '1') {
                    a++;
                    bfs.push({i, j});
                    while (!bfs.empty()) {
                        s = bfs.size();
                        while (s--) {
                            front = bfs.front();
                            grid[front.first][front.second] = '2';
                            if (front.first > 0 && grid[front.first - 1][front.second] == '1') {
                                bfs.push({front.first - 1, front.second});
                                grid[front.first - 1][front.second] = '2';
                            }
                            if (front.first < m - 1 && grid[front.first + 1][front.second] == '1') {
                                bfs.push({front.first + 1, front.second});
                                grid[front.first + 1][front.second] = '2';
                            }
                            if (front.second > 0 && grid[front.first][front.second - 1] == '1') {
                                bfs.push({front.first, front.second - 1});
                                grid[front.first][front.second - 1] = '2';
                            }
                            if (front.second < n - 1 && grid[front.first][front.second + 1] == '1') {
                                bfs.push({front.first, front.second + 1});
                                grid[front.first][front.second + 1] = '2';
                            }

                            bfs.pop();
                        }
                    }
                }
            }
        }
        return a;
    }
};

int main() {
    vector<vector<char>> qv {{'1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '0', '1', '1'},
                      {'0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '0'},
                      {'1', '0', '1', '1', '1', '0', '0', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
                      {'1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
                      {'1', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
                      {'1', '0', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1'},
                      {'0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1', '1', '1'},
                      {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1'},
                      {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
                      {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
                      {'0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
                      {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
                      {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
                      {'1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1'},
                      {'1', '0', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1'},
                      {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0'},
                      {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '0'},
                      {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
                      {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
                      {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'}};
    Solution s;
    s.numIslands(qv);
}